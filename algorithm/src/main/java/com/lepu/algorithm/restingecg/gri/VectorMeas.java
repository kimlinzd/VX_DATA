package com.lepu.algorithm.restingecg.gri;


/**
 * Maintains the vector measurements that are generated by the C ECG
 * analysis software library. Any lead measurement that is not available or
 * not measurable with have a value of (-32768) or GRI_UNDEFINED.
 * 
 * @author Brian Devine
 *
 */
public class VectorMeas {
	

	/**
	 * Maintains plane based vector measurements the are generated by the
	 * C ECG analysis software library.
	 * 
	 * @author Brian Devine
	 *
	 */
	public class VectorPlaneMeas {

		/**
		 * Maximum P measurement for the vector calculated from derived XYZ.
		 */
		short	maximumP_3lead;
		
		/**
		 * Maximum QRS measurement for the vector calculated from derived XYZ.
		 */
		short	maximumQRS_3lead;

		/**
		 * Maximum T measurement for the vector calculated from derived XYZ.
		 */
		short	maximumT_3lead;

		/**
		 * Maximum P measurement in frontal plane for the vector calculated
		 * from derived XYZ.
		 */
		short	maximumP_FrontalPlane;

		/**
		 * QRS +0.03 measurement for the vector calculated from derived XYZ.
		 */
		short	QRSplus_0_03;

		/**
		 * QRS -0.03 measurement for the vector calculated from derived XYZ.
		 */
		short	QRSminus_0_03;

		/**
		 * 3/8th QRS measurement for the vector calculated from derived XYZ.
		 */
		short	QRS38;
	
		/**
		 * 4/8th QRS measurement for the vector calculated from derived XYZ.
		 */
		short	QRS48;
		
		/**
		 * 5/8th QRS measurement for the vector calculated from derived XYZ.
		 */
		short	QRS58;

		/**
		 * 6/8th ST-T measurement for the vector calculated from derived XYZ.
		 */
		short	STT68;

		/**
		 * Maximum QRS measurement for the pseudo-vector calculated from
		 * I, aVF, V2.
		 */
		short	maximumQRS_12lead;

		/**
		 * Maximum T measurement for the pseudo-vector calculated from
		 * I, aVF, V2.
		 */
		short	maximumT_12lead;
	
		
		// ------------------------------------------------------------------
		// METHODS
		// ------------------------------------------------------------------

		/**
		 * Initialises all measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public VectorPlaneMeas()
		{
			this.maximumP_3lead        = RestingEcg.GRI_UNDEFINED;
			this.maximumQRS_3lead      = RestingEcg.GRI_UNDEFINED;
			this.maximumT_3lead        = RestingEcg.GRI_UNDEFINED;
			this.maximumP_FrontalPlane = RestingEcg.GRI_UNDEFINED;
			this.QRSplus_0_03          = RestingEcg.GRI_UNDEFINED;
			this.QRSminus_0_03         = RestingEcg.GRI_UNDEFINED;
			this.QRS38                 = RestingEcg.GRI_UNDEFINED;
			this.QRS48                 = RestingEcg.GRI_UNDEFINED;
			this.QRS58                 = RestingEcg.GRI_UNDEFINED;
			this.STT68                 = RestingEcg.GRI_UNDEFINED;
			this.maximumQRS_12lead     = RestingEcg.GRI_UNDEFINED;
			this.maximumT_12lead       = RestingEcg.GRI_UNDEFINED;
		}

		// ------------------------------------------------------------------

		/**
		 * Resets all vector measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public void clearMeasurements()
		{
			this.maximumP_3lead        = RestingEcg.GRI_UNDEFINED;
			this.maximumQRS_3lead      = RestingEcg.GRI_UNDEFINED;
			this.maximumT_3lead        = RestingEcg.GRI_UNDEFINED;
			this.maximumP_FrontalPlane = RestingEcg.GRI_UNDEFINED;
			this.QRSplus_0_03          = RestingEcg.GRI_UNDEFINED;
			this.QRSminus_0_03         = RestingEcg.GRI_UNDEFINED;
			this.QRS38                 = RestingEcg.GRI_UNDEFINED;
			this.QRS48                 = RestingEcg.GRI_UNDEFINED;
			this.QRS58                 = RestingEcg.GRI_UNDEFINED;
			this.STT68                 = RestingEcg.GRI_UNDEFINED;
			this.maximumQRS_12lead     = RestingEcg.GRI_UNDEFINED;
			this.maximumT_12lead       = RestingEcg.GRI_UNDEFINED;
		}

		// ------------------------------------------------------------------

		public void setMeasurements( short maximumP_3lead, short maximumQRS_3lead,
				short maximumT_3lead, short maximumP_FrontalPlane,
				short QRSplus_0_03, short QRSminus_0_03, short QRS38,
				short QRS48,short QRS58,short STT68,short maximumQRS_12lead,
				short maximumT_12lead )
		{
			this.maximumP_3lead        = maximumP_3lead;
			this.maximumQRS_3lead      = maximumQRS_3lead;
			this.maximumT_3lead        = maximumT_3lead;
			this.maximumP_FrontalPlane = maximumP_FrontalPlane;
			this.QRSplus_0_03          = QRSplus_0_03;
			this.QRSminus_0_03         = QRSminus_0_03;
			this.QRS38                 = QRS38;
			this.QRS48                 = QRS48;
			this.QRS58                 = QRS58;
			this.STT68                 = STT68;
			this.maximumQRS_12lead     = maximumQRS_12lead;
			this.maximumT_12lead       = maximumT_12lead;
		}
		
		// ------------------------------------------------------------------

		public void setMeasurements( short [] Values )
		{
			if ( Values.length >= 12 )
			{
				this.maximumP_3lead        = Values[0];
				this.maximumQRS_3lead      = Values[1];
				this.maximumT_3lead        = Values[2];
				this.maximumP_FrontalPlane = Values[3];
				this.QRSplus_0_03          = Values[4];
				this.QRSminus_0_03         = Values[5];
				this.QRS38                 = Values[6];
				this.QRS48                 = Values[7];
				this.QRS58                 = Values[8];
				this.STT68                 = Values[9];
				this.maximumQRS_12lead     = Values[10];
				this.maximumT_12lead       = Values[11];
			}
			else
			{
				throw new IllegalArgumentException( "Array parameter is wrong size - should be 12, but received " + Values.length );				
			}
		}

	}

	public class VectorSTTTimeNormalisedMeas
	{
		/**
		 * 1/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_18;
		
		/**
		 * 2/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_28;
	
		/**
		 * 3/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_38;
	
		/**
		 * 4/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_48;
	
		/**
		 * 5/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_58;
	
		/**
		 * 6/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_68;
	
		/**
		 * 7/8th time-normalised ST-T vector amplitude (uV)
		 */
		short	ST_T_78;
	
		
		// ------------------------------------------------------------------
		// METHODS
		// ------------------------------------------------------------------

		/**
		 * Initialises all measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public VectorSTTTimeNormalisedMeas()
		{
			this.ST_T_18 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_28 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_38 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_48 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_58 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_68 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_78 = RestingEcg.GRI_UNDEFINED;
		}

		// ------------------------------------------------------------------

		/**
		 * Resets all vector measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public void clearMeasurements()
		{
			this.ST_T_18 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_28 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_38 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_48 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_58 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_68 = RestingEcg.GRI_UNDEFINED;
			this.ST_T_78 = RestingEcg.GRI_UNDEFINED;
		}
	}

	public class VectorQRSTimeNormalisedMeas
	{
		/**
		 * 1/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_18;
	
		/**
		 * 2/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_28;
	
		/**
		 * 3/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_38;
	
		/**
		 * 4/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_48;
	
		/**
		 * 5/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_58;
		
		/**
		 * 6/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_68;
	
		/**
		 * 7/8th time-normalised QRS spatial velocity vector (uV/msec).
		 */
		short	QRS_78;

		// ------------------------------------------------------------------
		// METHODS
		// ------------------------------------------------------------------

		/**
		 * Initialises all measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public VectorQRSTimeNormalisedMeas()
		{
			this.QRS_18 = RestingEcg.GRI_UNDEFINED;
			this.QRS_28 = RestingEcg.GRI_UNDEFINED;
			this.QRS_38 = RestingEcg.GRI_UNDEFINED;
			this.QRS_48 = RestingEcg.GRI_UNDEFINED;
			this.QRS_58 = RestingEcg.GRI_UNDEFINED;
			this.QRS_68 = RestingEcg.GRI_UNDEFINED;
			this.QRS_78 = RestingEcg.GRI_UNDEFINED;
		}
		
		// ------------------------------------------------------------------
		
		/**
		 * Resets all vector measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public void clearMeasurements()
		{
			this.QRS_18 = RestingEcg.GRI_UNDEFINED;
			this.QRS_28 = RestingEcg.GRI_UNDEFINED;
			this.QRS_38 = RestingEcg.GRI_UNDEFINED;
			this.QRS_48 = RestingEcg.GRI_UNDEFINED;
			this.QRS_58 = RestingEcg.GRI_UNDEFINED;
			this.QRS_68 = RestingEcg.GRI_UNDEFINED;
			this.QRS_78 = RestingEcg.GRI_UNDEFINED;
		}
	}

	public class VectorQRSDivisionMeas
	{
		/**
		 * QRS spatial velocity vector amplitude at +10ms in uV
		 */
		short	QRS_10;
	
		/**
		 * QRS spatial velocity vector amplitude at +20ms in uV
		 */
		short	QRS_20;
		
		/**
		 * QRS spatial velocity vector amplitude at +30ms in uV
		 */
		short	QRS_30;
		
		/**
		 * QRS spatial velocity vector amplitude at -10ms in uV
		 */
		short	QRS_neg10;
		
		/**
		 * QRS spatial velocity vector amplitude at -20ms in uV
		 */
		short	QRS_neg20;
		
		/**
		 * QRS spatial velocity vector amplitude at -30ms in uV
		 */
		short	QRS_neg30;

		// ------------------------------------------------------------------
		// METHODS
		// ------------------------------------------------------------------

		/**
		 * Initialises all measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public VectorQRSDivisionMeas()
		{
			this.QRS_10    = RestingEcg.GRI_UNDEFINED;
			this.QRS_20    = RestingEcg.GRI_UNDEFINED;
			this.QRS_30    = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg10 = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg20 = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg30 = RestingEcg.GRI_UNDEFINED;
		}
		
		// ------------------------------------------------------------------

		/**
		 * Resets all vector measurements to {@link RestingEcg#GRI_UNDEFINED}.
		 */
		public void clearMeasurements()
		{
			this.QRS_10    = RestingEcg.GRI_UNDEFINED;
			this.QRS_20    = RestingEcg.GRI_UNDEFINED;
			this.QRS_30    = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg10 = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg20 = RestingEcg.GRI_UNDEFINED;
			this.QRS_neg30 = RestingEcg.GRI_UNDEFINED;
		}
	}


	/**
	 * The angle (0 to 360 degrees) between the projection of the spatial
	 * vector at the specified point onto the frontal plane and the positive
	 * direction of the X axis.
	 */
	VectorPlaneMeas	Angles_Frontal;
	
	/**
	 * The angle (0 to 360 degrees) between the projection of the spatial
	 * vector at the point specified onto the right sagittal plane and the
	 * positive direction of the Z axis.
	 */
	VectorPlaneMeas	Angles_RightSagittal;
	
	/**
	 * The angle (0 to 360 degrees) between the projection of the spatial
	 * vector at the specified point onto the transverse plane and the
	 * positive direction of the X axis.
	 */
	VectorPlaneMeas	Angles_Transverse;

	/**
	 * The length (uV) of the projection of the spatial vector at the
	 * specified point onto the frontal plane.
	 */
	VectorPlaneMeas	Lengths_Frontal;
	
	/**
	 * The length (uV) of the projection of the spatial vector at the
	 * point specified onto the right sagittal plane.
	 */
	VectorPlaneMeas	Lengths_RightSagittal;
	
	/**
	 * The length (uV) of the projection of the spatial vector at the
	 * specified point onto the transverse plane.
	 */
	VectorPlaneMeas	Lengths_Transverse;
	
	/**
	 * Magnitude (uV) of the spatial vector at the point specified.  
	 */
	VectorPlaneMeas	Magnitude;
	
	/**
	 * Sample number of specified point within representative beat.
	 * @NOTIFY: 0-based or 1-based?  
	 */
	VectorPlaneMeas	Positions;

	/**
	 * Amplitude (uV) of the lead X vector at the specified time-normalized
	 * point, where 0/8 is the onset of the ST segment and 8/8 the termination
	 * of the T wave. All amplitudes are measured relative to the onset of
	 * the QRS complex.
	 */
	VectorSTTTimeNormalisedMeas	STTTimeNormalised_X;
	
	/**
	 * Amplitude (uV) of the lead Y vector at the specified time-normalized
	 * point, where 0/8 is the onset of the ST segment and 8/8 the termination
	 * of the T wave. All amplitudes are measured relative to the onset of
	 * the QRS complex.
	 */
	VectorSTTTimeNormalisedMeas	STTTimeNormalised_Y;
	
	/**
	 * Amplitude (uV) of the lead Z vector at the specified time-normalized
	 * point, where 0/8 is the onset of the ST segment and 8/8 the termination
	 * of the T wave. All amplitudes are measured relative to the onset of
	 * the QRS complex.
	 */
	VectorSTTTimeNormalisedMeas	STTTimeNormalised_Z;
	
	/**
	 * Amplitude (uV) of the spatial velocity vector at the specified
	 * time-normalized point for the vector calculated from derived XYZ.
	 */
	VectorQRSTimeNormalisedMeas	QRSTimeNormalised_3Lead;
	
	/**
	 * Amplitude (uV) of the spatial velocity vector at the specified
	 * time-normalized points for the pseudo-vector calculated from
	 * I, aVF and V2.
	 */
	VectorQRSTimeNormalisedMeas	QRSTimeNormalisedQRS_12Lead;
	
	/**
	 * Amplitude (uV) of the spatial velocity vector at the specified
	 * instant of time for the vector calculated from derived XYZ.
	 */
	VectorQRSDivisionMeas	QRSDivisions_3Lead;
	
	/**
	 * Amplitude (uV) of the spatial velocity vector at the specified
	 * instant of time for the pseudo-vector calculated from
	 * I, aVF and V2.
	 */
	VectorQRSDivisionMeas	QRSDivisions_12Lead;
	
	/**
	 * Maximum QRS spatial velocity (uV/msec) using vector calculated from
	 * derived XYZ.
	 */
	short	MaximumQRSSpatialVelocity_3Lead;

	/**
	 * Maximum QRS spatial velocity (uV/msec) using pseudo-vector calculated
	 * from I, aVF and V2.
	 */
	short	MaximumQRSSpatialVelocity_12Lead;

	/**
	 * Maximum T spatial velocity (uV/msec) using vector calculated from
	 * derived XYZ.
	 */
	short	MaximumTSpatialVelocity_3Lead;

	/**
	 * Maximum T spatial velocity (uV/msec) using pseudo-vector calculated
	 * from I, aVF and V2.
	 */
	short	MaximumTSpatialVelocity_12Lead;

	/**
	 * QRS-T spatial angle(-180 to +180 degrees) using vector calculated
	 * from derived XYZ.
	 */
	short	MaximumQRS_TSpatialAngle_3Lead;

	/**
	 * QRS-T spatial angle(-180 to +180 degrees) using pseudo-vector calculated
	 * from I, aVF and V2.
	 */
	short	MaximumQRS_TSpatialAngle_12Lead;
	

	// ------------------------------------------------------------------
	// METHODS
	// ------------------------------------------------------------------

	VectorMeas()
	{
		this.STTTimeNormalised_X = new VectorSTTTimeNormalisedMeas();
		this.STTTimeNormalised_Y = new VectorSTTTimeNormalisedMeas();
		this.STTTimeNormalised_Z = new VectorSTTTimeNormalisedMeas();

		this.Angles_Frontal        = new VectorPlaneMeas();
		this.Angles_RightSagittal  = new VectorPlaneMeas();
		this.Angles_Transverse     = new VectorPlaneMeas();
		this.Lengths_Frontal       = new VectorPlaneMeas();
		this.Lengths_RightSagittal = new VectorPlaneMeas();
		this.Lengths_Transverse    = new VectorPlaneMeas();
		this.Magnitude             = new VectorPlaneMeas();
		this.Positions             = new VectorPlaneMeas();
		
		this.QRSDivisions_3Lead    = new VectorQRSDivisionMeas();
		this.QRSDivisions_12Lead   = new VectorQRSDivisionMeas();
		
		this.QRSTimeNormalised_3Lead          = new VectorQRSTimeNormalisedMeas();
		this.QRSTimeNormalisedQRS_12Lead      = new VectorQRSTimeNormalisedMeas();
		
		this.MaximumQRSSpatialVelocity_3Lead  = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRSSpatialVelocity_12Lead = RestingEcg.GRI_UNDEFINED;
		this.MaximumTSpatialVelocity_3Lead    = RestingEcg.GRI_UNDEFINED;
		this.MaximumTSpatialVelocity_12Lead   = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRS_TSpatialAngle_3Lead   = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRS_TSpatialAngle_12Lead  = RestingEcg.GRI_UNDEFINED;
	}
	
	// ----------------------------------------------------------------------
	
	/**
	 * Resets all vector measurements to {@link RestingEcg#GRI_UNDEFINED}.
	 */
	public void clearMeasurements()
	{
		this.STTTimeNormalised_X.clearMeasurements();
		this.STTTimeNormalised_Y.clearMeasurements();
		this.STTTimeNormalised_Z.clearMeasurements();
		
		this.Angles_Frontal.clearMeasurements();
		this.Angles_RightSagittal.clearMeasurements();
		this.Angles_Transverse.clearMeasurements();
		this.Lengths_Frontal.clearMeasurements();
		this.Lengths_RightSagittal.clearMeasurements();
		this.Lengths_Transverse.clearMeasurements();
		this.Magnitude.clearMeasurements();
		this.Positions.clearMeasurements();

		this.QRSDivisions_3Lead.clearMeasurements();
		this.QRSDivisions_12Lead.clearMeasurements();

		this.QRSTimeNormalised_3Lead.clearMeasurements();
		this.QRSTimeNormalisedQRS_12Lead.clearMeasurements();

		this.QRSDivisions_3Lead.clearMeasurements();
		this.QRSDivisions_12Lead.clearMeasurements();

		this.MaximumQRSSpatialVelocity_3Lead  = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRSSpatialVelocity_12Lead = RestingEcg.GRI_UNDEFINED;
		this.MaximumTSpatialVelocity_3Lead    = RestingEcg.GRI_UNDEFINED;
		this.MaximumTSpatialVelocity_12Lead   = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRS_TSpatialAngle_3Lead   = RestingEcg.GRI_UNDEFINED;
		this.MaximumQRS_TSpatialAngle_12Lead  = RestingEcg.GRI_UNDEFINED;
	}
}

package com.lepu.algorithm.restingecg.gri;

import android.util.Log;

/**
 * Maintains the individual lead measurements that are generated by the
 * analysis software. Any lead measurement that is not available or not
 * measurable with have a value of (-32768) or GRI_UNDEFINED.
 * 
 * @author Brian Devine
 *
 */
public class LeadMeas {

	// --------------------------------------------------------------------------	
	private static final String TAG = "MyActivity-LeadMeas";
	// --------------------------------------------------------------------------	

	/**
	 * A {@link GriLeadId} lead identifier that indicates which lead this measurements
	 * have been derived from.
	 */
	GriLeadId	LeadId;
	
	short	POnset;
	short	PDuration;
	short	QrsOnset;
	short	QrsDuration;
	short	ST80Amplitude;
	short	QDuration;
	short	RDuration;
	short	SDuration;
	short	RDashDuration;
	short	SDashDuration;
	short	RDashDashDuration;
	short	SDashDashDuration;
	short	STDuration;
	short	TOnset;
	short	TDuration;
	short	PPosDuration;
	short	TPosDuration;
	short	QrsIntrinsicoidDefl;
	short	PPosAmplitude;
	short	PNegAmplitude;
	short	PeakToPeakQrsAmplitude;
	short	R1Amplitude;
	short	QAmplitude;
	short	RAmplitude;
	short	SAmplitude;
	short	RDashAmplitude;
	short	SDashAmplitude;
	short	RDashDashAmplitude;
	short	SDashDashAmplitude;
	short	STAmplitude;
	short	STT28Amplitude;
	short	STT38Amplitude;
	short	TposAmplitude;
	short	TnegAmplitude;
	short	QrsArea;
	short	PArea;
	short	TArea;
	short	PMorphology;
	short	TMorphology;
	
	/**
	 * Count of the number of R wave notches.
	 */
	short	RNotches;
	
	/**
	 * The delta wave confidence (percentage probabilityof a delta wave being
	 * present).
	 */
	short	DeltaWaveConfidence;
	
	/**
	 * The ST slope angle in degrees.
	 */
	short	STSlope;
	short	QTInterval;
	short	STMAmplitude;
	short	ST60Amplitude;
	short	STTMidAmplitude;

	// ----------------------------------------------------------------------
	// METHODS
	// ----------------------------------------------------------------------

	/**
	 * Creates and initialises a LeadMeas instance and sets the lead
	 * identifier to {@link GriLeadId} GRI_LEADID_UNDEFINED.
	 */
	public LeadMeas( )
	{
		this( GriLeadId.GRI_LEADID_UNDEFINED );
	}

	// ----------------------------------------------------------------------
	/**
	 * Creates and initialises a LeadMeas instance and sets the {@link GriLeadId}
	 * lead identifier for the given lead.
	 * 
	 * @param LeadId	The {@link GriLeadId} identifier for the given lead.
	 */
	public LeadMeas( GriLeadId LeadId )
	{
		this.LeadId                 = LeadId;

		this.POnset                 = RestingEcg.GRI_UNDEFINED;
		this.PDuration              = RestingEcg.GRI_UNDEFINED;
		this.QrsOnset               = RestingEcg.GRI_UNDEFINED;
		this.QrsDuration            = RestingEcg.GRI_UNDEFINED;
		this.ST80Amplitude          = RestingEcg.GRI_UNDEFINED;
		this.QDuration              = RestingEcg.GRI_UNDEFINED;
		this.RDuration              = RestingEcg.GRI_UNDEFINED;
		this.SDuration              = RestingEcg.GRI_UNDEFINED;
		this.RDashDuration          = RestingEcg.GRI_UNDEFINED;
		this.SDashDuration          = RestingEcg.GRI_UNDEFINED;
		this.RDashDashDuration      = RestingEcg.GRI_UNDEFINED;
		this.SDashDashDuration      = RestingEcg.GRI_UNDEFINED;
		this.STDuration             = RestingEcg.GRI_UNDEFINED;
		this.TOnset                 = RestingEcg.GRI_UNDEFINED;
		this.TDuration              = RestingEcg.GRI_UNDEFINED;
		this.PPosDuration           = RestingEcg.GRI_UNDEFINED;
		this.TPosDuration           = RestingEcg.GRI_UNDEFINED;
		this.QrsIntrinsicoidDefl    = RestingEcg.GRI_UNDEFINED;
		this.PPosAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.PNegAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.PeakToPeakQrsAmplitude = RestingEcg.GRI_UNDEFINED;
		this.R1Amplitude            = RestingEcg.GRI_UNDEFINED;
		this.QAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.RAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.SAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.RDashAmplitude         = RestingEcg.GRI_UNDEFINED;
		this.SDashAmplitude         = RestingEcg.GRI_UNDEFINED;
		this.RDashDashAmplitude     = RestingEcg.GRI_UNDEFINED;
		this.SDashDashAmplitude     = RestingEcg.GRI_UNDEFINED;
		this.STAmplitude            = RestingEcg.GRI_UNDEFINED;
		this.STT28Amplitude         = RestingEcg.GRI_UNDEFINED;
		this.STT38Amplitude         = RestingEcg.GRI_UNDEFINED;
		this.TposAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.TnegAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.QrsArea                = RestingEcg.GRI_UNDEFINED;
		this.PArea                  = RestingEcg.GRI_UNDEFINED;
		this.TArea                  = RestingEcg.GRI_UNDEFINED;
		this.PMorphology            = RestingEcg.GRI_UNDEFINED;
		this.TMorphology            = RestingEcg.GRI_UNDEFINED;
		this.RNotches               = RestingEcg.GRI_UNDEFINED;
		this.DeltaWaveConfidence    = RestingEcg.GRI_UNDEFINED;
		this.STSlope                = RestingEcg.GRI_UNDEFINED;
		this.QTInterval             = RestingEcg.GRI_UNDEFINED;
		this.STMAmplitude           = RestingEcg.GRI_UNDEFINED;
		this.ST60Amplitude          = RestingEcg.GRI_UNDEFINED;
		this.STTMidAmplitude        = RestingEcg.GRI_UNDEFINED;

	}
		
	// ----------------------------------------------------------------------

	/**
	 * Sets the {@link GriLeadId} lead identifier to the given value.
	 * 
	 * @param LeadId	The {@link GriLeadId} lead identifier.
	 */
	public void setLeadId( GriLeadId LeadId )
	{
		this.LeadId = LeadId;
	}
	
	// ----------------------------------------------------------------------

	/**
	 * Sets the P onset (in milliseconds) for the lead to the
	 * specified value.
	 * 
	 * @param Value	The P onset in milliseconds from the start of the data. 
	 */
	public void setPOnset( short Value )
	{
		this.POnset  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P duration (in milliseconds) for the lead to the specified value.
	 * 
	 * @param Value	The P duration in milliseconds. 
	 */
	public void setPDuration( short Value )
	{
		this.PDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the QRS onset (ms) for the lead to the specified
	 * value.
	 *  
	 * @param Value	The QRS onset in milliseconds from the start of the data.
	 */
	public void setQrsOnset( short Value )
	{
		this.QrsOnset  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the QRS duration (ms) for the lead to the specified
	 * value.
	 * 
	 * @param Value	The QRS duration in milliseconds from the start of the data.
	 */
	public void setQrsDuration( short Value )
	{
		this.QrsDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the amplitude (uV) at 80ms after the ST junction to the
	 * specified value.
	 *  
	 * @param Value	The amplitude at STj+80ms expressed in microvolts.
	 */
	public void setST80Amplitude( short Value )
	{
		this.ST80Amplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the Q duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The Q duration in milliseconds. 
	 */
	public void setQDuration( short Value )
	{
		this.QDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The R duration in milliseconds. 
	 */
	public void setRDuration( short Value )
	{
		this.RDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The S duration in milliseconds. 
	 */
	public void setSDuration( short Value )
	{
		this.SDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R' duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The R' duration in milliseconds. 
	 */
	public void setRDashDuration( short Value )
	{
		this.RDashDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S' duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The S' duration in milliseconds. 
	 */
	public void setSDashDuration( short Value )
	{
		this.SDashDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R'' duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The R'' duration in milliseconds. 
	 */
	public void setRDashDashDuration( short Value )
	{
		this.RDashDashDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S'' duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The S'' duration in milliseconds. 
	 */
	public void setSDashDashDuration( short Value )
	{
		this.SDashDashDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the ST duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The ST duration in milliseconds. 
	 */
	public void setSTDuration( short Value )
	{
		this.STDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the location of the T onset (ms) for the lead to the specified value.
	 * 
	 * @param Value	The T onset location in milliseconds from start of recording. 
	 */
	public void setTOnset( short Value )
	{
		this.TOnset  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The T duration in milliseconds. 
	 */
	public void setTDuration( short Value )
	{
		this.TDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P+ duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The P+ duration in milliseconds. 
	 */
	public void setPPosDuration( short Value )
	{
		this.PPosDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T+ duration (ms) for the lead to the specified value.
	 * 
	 * @param Value	The T+ duration in milliseconds. 
	 */
	public void setTPosDuration( short Value )
	{
		this.TPosDuration  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the QRS intrinsicoid deflection (ms) for the lead to the specified value.
	 * 
	 * @param Value	The QRS intrinsicoid deflection in milliseconds. 
	 */
	public void setQrsIntrinsicoidDefl( short Value )
	{
		this.QrsIntrinsicoidDefl  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P+ amplitude (uV) to the specified value.
	 *  
	 * @param Value	The P+ amplitude expressed in microvolts.
	 */
	public void setPPosAmplitude( short Value )
	{
		this.PPosAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P- amplitude (uV) to the specified value.
	 *  
	 * @param Value	The P- amplitude expressed in microvolts.
	 */
	public void setPNegAmplitude( short Value )
	{
		this.PNegAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the peak-to-peak QRS amplitude (uV) to the specified value.
	 *  
	 * @param Value	The peak-to-peak QRS amplitude expressed in microvolts.
	 */
	public void setPeakToPeakQrsAmplitude( short Value )
	{
		this.PeakToPeakQrsAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R1 amplitude (uV) to the specified value.
	 *  
	 * @param Value	The R1 amplitude expressed in microvolts.
	 */
	public void setR1Amplitude( short Value )
	{
		this.R1Amplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the Q amplitude (uV) to the specified value.
	 *  
	 * @param Value	The Q amplitude expressed in microvolts.
	 */
	public void setQAmplitude( short Value )
	{
		this.QAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R amplitude (uV) to the specified value.
	 *  
	 * @param Value	The R amplitude expressed in microvolts.
	 */
	public void setRAmplitude( short Value )
	{
		this.RAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S amplitude (uV) to the specified value.
	 *  
	 * @param Value	The S amplitude expressed in microvolts.
	 */
	public void setSAmplitude( short Value )
	{
		this.SAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R' amplitude (uV) to the specified value.
	 *  
	 * @param Value	The R' amplitude expressed in microvolts.
	 */
	public void setRDashAmplitude( short Value )
	{
		this.RDashAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S' amplitude (uV) to the specified value.
	 *  
	 * @param Value	The S' amplitude expressed in microvolts.
	 */
	public void setSDashAmplitude( short Value )
	{
		this.SDashAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the R'' amplitude (uV) to the specified value.
	 * 
	 * @param Value	The R'' amplitude expressed in microvolts.
	 */
	public void setRDashDashAmplitude( short Value )
	{
		this.RDashDashAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the S'' amplitude (uV) to the specified value.
	 *  
	 * @param Value	The S'' amplitude expressed in microvolts.
	 */
	public void setSDashDashAmplitude( short Value )
	{
		this.SDashDashAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the ST amplitude (uV) to the specified value.
	 *  
	 * @param Value	The ST amplitude expressed in microvolts.
	 */
	public void setSTAmplitude( short Value )
	{
		this.STAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the 2/8 ST-T amplitude (uV) to the specified value.
	 *  
	 * @param Value	The 2/8 ST-T amplitude expressed in microvolts.
	 */
	public void setSTT28Amplitude( short Value )
	{
		this.STT28Amplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the 3/8 ST-T amplitude (uV) to the specified value.
	 *  
	 * @param Value	The 3/8 ST-T amplitude expressed in microvolts.
	 */
	public void setSTT38Amplitude( short Value )
	{
		this.STT38Amplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T+ amplitude (uV) to the specified value.
	 *  
	 * @param Value	The T+ amplitude expressed in microvolts.
	 */
	public void setTposAmplitude( short Value )
	{
		this.TposAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T- amplitude (uV) to the specified value.
	 *  
	 * @param Value	The T- amplitude expressed in microvolts.
	 */
	public void setTnegAmplitude( short Value )
	{
		this.TnegAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the QRS area (uV-ms) to the specified value.
	 *  
	 * @param Value	The QRS area expressed in microvolts-milliseconds.
	 */
	public void setQrsArea( short Value )
	{
		this.QrsArea  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P area (uV-ms) to the specified value.
	 *  
	 * @param Value	The P area expressed in microvolts-milliseconds.
	 */
	public void setPArea( short Value )
	{
		this.PArea  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T area (uV-ms) to the specified value.
	 *  
	 * @param Value	The T area expressed in microvolts-milliseconds.
	 */
	public void setTArea( short Value )
	{
		this.TArea  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the P wave morphology to the specified value. The P morphology
	 * can be one of the following values:-
	 * <P> 
	 * -2  - biphasic (negative then positive components)
	 * -1  - inverted
	 *  1  - upright
	 *  2  - biphasic (positive then negative components)
	 *  <P>
	 *  or (-32768) if it is not measurable.
	 *  
	 * @param Value	The P wave morphology value.
	 */
	public void setPMorphology( short Value )
	{
		if ( Value >= -2 && Value <= 2 || Value == RestingEcg.GRI_UNDEFINED )
		{
			this.PMorphology  = Value;
		}
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the T wave morphology to the specified value. The T morphology
	 * can be one of the following values:-
	 * <P> 
	 * -2  - biphasic (negative then positive components)
	 * -1  - inverted
	 *  1  - upright
	 *  2  - biphasic (positive then negative components)
	 *  <P>
	 *  or (-32768) if it is not measurable.
	 *  
	 * @param Value	The T wave morphology value.
	 */
	public void setTMorphology( short Value )
	{
		if ( Value >= -2 && Value <= 2 || Value == RestingEcg.GRI_UNDEFINED )
		{
			this.TMorphology  = Value;
		}
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the number of R wave notches to the specified value.
	 * 
	 * @param Value	The number of R wave notches.
	 */
	public void setRNotches( short Value )
	{
		this.RNotches  = Value;
	}

	// ----------------------------------------------------------------------

	public void setDeltaWaveConfidence( short Value )
	{
		this.DeltaWaveConfidence  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the ST slope angle (degrees) to the specified value.
	 * 
	 * @param Value	The angle of ST slope in degrees.
	 */
	public void setSTSlope( short Value )
	{
		this.STSlope  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the QT interval (ms) for the lead to the specified value.
	 * 
	 * @param Value	The QT interval in milliseconds. 
	 */
	public void setQTInterval( short Value )
	{
		this.QTInterval  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the amplitude (uV) at the mid-point between the ST junction and
	 * the end of the ST segment where the end of the ST segment is defined
	 * to be 1/8th of the average RR interval from the ST junction.
	 * 
	 * @param Value	The amplitude at STM expressed in microvolts.
	 */
	public void setSTMAmplitude( short Value )
	{
		this.STMAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the amplitude (uV) at 60ms after the ST junction to the
	 * specified value.
	 *  
	 * @param Value	The amplitude at STj+60ms expressed in microvolts.
	 */
	public void setST60Amplitude( short Value )
	{
		this.ST60Amplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Sets the amplitude (uV) at the mid-point of the ST-T.
	 * 
	 * @param Value	The amplitude at the mid point of the ST-T in microvolts.
	 */
	public void setSTTMidAmplitude( short Value )
	{
		this.STTMidAmplitude  = Value;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P onset (in milliseconds) for the lead.
	 * 
	 * @return	The P onset in milliseconds from the start of the data. 
	 */
	public short getPOnset()
	{
		return this.POnset;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P duration (in milliseconds) for the lead.
	 * 
	 * @return	The P duration in milliseconds. 
	 */
	public short getPDuration()
	{
		return this.PDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the QRS onset (in milliseconds) for the lead.
	 * 
	 * @return	The QRS onset in milliseconds from the start of the data. 
	 */
	public short getQrsOnset()
	{
		return this.QrsOnset;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the QRS duration (in milliseconds) for the lead.
	 * 
	 * @return	The QRS duration in milliseconds. 
	 */
	public short getQrsDuration()
	{
		return this.QrsDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the amplitude (uV) at 80ms after the ST junction for the lead.
	 *  
	 * @return	The amplitude at STj+80ms expressed in microvolts.
	 */
	public short getST80Amplitude()
	{
		return this.ST80Amplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the Q duration (in milliseconds) for the lead.
	 * 
	 * @return	The Q duration in milliseconds. 
	 */
	public short getQDuration()
	{
		return this.QDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R duration (in milliseconds) for the lead.
	 * 
	 * @return	The R duration in milliseconds. 
	 */
	public short getRDuration()
	{
		return this.RDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S duration (in milliseconds) for the lead.
	 * 
	 * @return	The S duration in milliseconds. 
	 */
	public short getSDuration()
	{
		return this.SDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R' duration (in milliseconds) for the lead.
	 * 
	 * @return	The R' duration in milliseconds. 
	 */
	public short getRDashDuration()
	{
		return this.RDashDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S' duration (in milliseconds) for the lead.
	 * 
	 * @return	The S' duration in milliseconds. 
	 */
	public short getSDashDuration()
	{
		return this.SDashDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R'' duration (in milliseconds) for the lead.
	 * 
	 * @return	The R'' duration in milliseconds. 
	 */
	public short getRDashDashDuration()
	{
		return this.RDashDashDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S'' duration (in milliseconds) for the lead.
	 * 
	 * @return	The S'' duration in milliseconds. 
	 */
	public short getSDashDashDuration()
	{
		return this.SDashDashDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the ST duration (in milliseconds) for the lead.
	 * 
	 * @return	The ST duration in milliseconds. 
	 */
	public short getSTDuration()
	{
		return this.STDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T onset (in milliseconds) for the lead.
	 * 
	 * @return	The T onset in milliseconds from the start of the data. 
	 */
	public short getTOnset()
	{
		return this.TOnset;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T duration (in milliseconds) for the lead.
	 * 
	 * @return	The T duration in milliseconds. 
	 */
	public short getTDuration()
	{
		return this.TDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P+ duration (in milliseconds) for the lead.
	 * 
	 * @return	The P+ duration in milliseconds. 
	 */
	public short getPPosDuration()
	{
		return this.PPosDuration;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T+ duration (in milliseconds) for the lead.
	 * 
	 * @return	The T+ duration in milliseconds. 
	 */
	public short getTPosDuration()
	{
		return this.TPosDuration;
	}

	// ----------------------------------------------------------------------

	public short getQrsIntrinsicoidDefl()
	{
		return this.QrsIntrinsicoidDefl;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P+ amplitude (uV) for the lead.
	 *  
	 * @return	The P+ amplitude expressed in microvolts.
	 */
	public short getPPosAmplitude()
	{
		return this.PPosAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P- amplitude (uV) for the lead.
	 *  
	 * @return	The P- amplitude expressed in microvolts.
	 */
	public short getPNegAmplitude()
	{
		return this.PNegAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the peak-to-peak QRS amplitude (uV) for the lead.
	 * 
	 * @return	The peak-to-peak QRS amplitude expressed in microvolts.
	 */
	public short getPeakToPeakQrsAmplitude()
	{
		return this.PeakToPeakQrsAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R1 amplitude (uV) for the lead.
	 *  
	 * @return	The R1 amplitude expressed in microvolts.
	 */
	public short getR1Amplitude()
	{
		return this.R1Amplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the Q amplitude (uV) for the lead.
	 *  
	 * @return	The Q amplitude expressed in microvolts.
	 */
	public short getQAmplitude()
	{
		return this.QAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R amplitude (uV) for the lead.
	 *  
	 * @return	The R amplitude expressed in microvolts.
	 */
	public short getRAmplitude()
	{
		return this.RAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S amplitude (uV) for the lead.
	 *  
	 * @return	The S amplitude expressed in microvolts.
	 */
	public short getSAmplitude()
	{
		return this.SAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R' amplitude (uV) for the lead.
	 *  
	 * @return	The R' amplitude expressed in microvolts.
	 */
	public short getRDashAmplitude()
	{
		return this.RDashAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S' amplitude (uV) for the lead.
	 *  
	 * @return	The S' amplitude expressed in microvolts.
	 */
	public short getSDashAmplitude()
	{
		return this.SDashAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the R'' amplitude (uV) for the lead.
	 *  
	 * @return	The R'' amplitude expressed in microvolts.
	 */
	public short getRDashDashAmplitude()
	{
		return this.RDashDashAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the S'' amplitude (uV) for the lead.
	 *  
	 * @return	The S'' amplitude expressed in microvolts.
	 */
	public short getSDashDashAmplitude()
	{
		return this.SDashDashAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the ST amplitude (uV) for the lead.
	 *  
	 * @return	The ST amplitude expressed in microvolts.
	 */
	public short getSTAmplitude()
	{
		return this.STAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the 2/8 ST-T amplitude (uV) for the lead.
	 * 
	 * @return	The 2/8 ST-T amplitude expressed in microvolts.
	 */
	public short getSTT28Amplitude()
	{
		return this.STT28Amplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the 3/8 ST-T amplitude (uV) for the lead.
	 * 
	 * @return	The 3/8 ST-T amplitude expressed in microvolts.
	 */
	public short getSTT38Amplitude()
	{
		return this.STT38Amplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T+ amplitude (uV) for the lead.
	 *  
	 * @return	The T+ amplitude expressed in microvolts.
	 */
	public short getTposAmplitude()
	{
		return this.TposAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T- amplitude (uV) for the lead.
	 *  
	 * @return	The T- amplitude expressed in microvolts.
	 */
	public short getTnegAmplitude()
	{
		return this.TnegAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the QRS area (uV-ms) for the lead.
	 * 
	 * @return	The QRS area expressed in microvolts-milliseconds.
	 */
	public short getQrsArea()
	{
		return this.QrsArea;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P area (uV-ms) for the lead.
	 * 
	 * @return	The P area expressed in microvolts-milliseconds.
	 */
	public short getPArea()
	{
		return this.PArea;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T area (uV-ms) for the lead.
	 * 
	 * @return	The T area expressed in microvolts-milliseconds.
	 */
	public short getTArea()
	{
		return this.TArea;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the P wave morphology for the lead. The P morphology
	 * can be one of the following values:-
	 * <P> 
	 * -2  - biphasic (negative then positive components)
	 * -1  - inverted
	 *  1  - upright
	 *  2  - biphasic (positive then negative components)
	 *  <P>
	 *  or (-32768) if it is not measurable.
	 * 
	 * @return	The P wave morphology.
	 */
	public short getPMorphology()
	{
		return this.PMorphology;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the T wave morphology for the lead. The T morphology
	 * can be one of the following values:-
	 * <P> 
	 * -2  - biphasic (negative then positive components)
	 * -1  - inverted
	 *  1  - upright
	 *  2  - biphasic (positive then negative components)
	 *  <P>
	 *  or (-32768) if it is not measurable.
	 * 
	 * @return	The T wave morphology.
	 */
	public short getTMorphology()
	{
		return this.TMorphology;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the number of R wave notches for the lead.
	 * 
	 * @return	The number of R wave notches.
	 */
	public short getRNotches()
	{
		return this.RNotches;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the delta wave confidence (percentage probability
	 * of a delta wave being present) for the lead.
	 *  
	 * @return	The delta wave confidence.
	 */
	public short getDeltaWaveConfidence()
	{
		return this.DeltaWaveConfidence;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the ST slope angle (degrees) for the lead.
	 * 
	 * @return	The angle of ST slope in degrees.
	 */
	public short getSTSlope()
	{
		return this.STSlope;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the QT interval (ms) for the lead.
	 * 
	 * @return	The QT interval in milliseconds. 
	 */
	public short getQTInterval()
	{
		return this.QTInterval;
	}

	// ----------------------------------------------------------------------

	/**
	 * Gets the amplitude (uV) at the mid-point between the ST junction and
	 * the end of the ST segment where the end of the ST segment is defined
	 * to be 1/8th of the average RR interval from the ST junction.
	 * 
	 * @return	The amplitude at STM expressed in microvolts.
	 */
	public short getSTMAmplitude()
	{
		return this.STMAmplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the amplitude (uV) at 60ms after the ST junction.
	 * 
	 * @return	The amplitude at STj+60ms expressed in microvolts.
	 */
	public short getST60Amplitude()
	{
		return this.ST60Amplitude;
	}

	// ----------------------------------------------------------------------

	/**
	 * Retrieves the amplitude (uV) at the mid-point of the ST-T.
	 * 
	 * @return	The amplitude at the mid point of the ST-T in microvolts.
	 */
	public short getSTTMidAmplitude()
	{
		return this.STTMidAmplitude;
	}

	// ----------------------------------------------------------------------

	public void clearMeasurements()
	{
		this.POnset                 = RestingEcg.GRI_UNDEFINED;
		this.PDuration              = RestingEcg.GRI_UNDEFINED;
		this.QrsOnset               = RestingEcg.GRI_UNDEFINED;
		this.QrsDuration            = RestingEcg.GRI_UNDEFINED;
		this.ST80Amplitude          = RestingEcg.GRI_UNDEFINED;
		this.QDuration              = RestingEcg.GRI_UNDEFINED;
		this.RDuration              = RestingEcg.GRI_UNDEFINED;
		this.SDuration              = RestingEcg.GRI_UNDEFINED;
		this.RDashDuration          = RestingEcg.GRI_UNDEFINED;
		this.SDashDuration          = RestingEcg.GRI_UNDEFINED;
		this.RDashDashDuration      = RestingEcg.GRI_UNDEFINED;
		this.SDashDashDuration      = RestingEcg.GRI_UNDEFINED;
		this.STDuration             = RestingEcg.GRI_UNDEFINED;
		this.TOnset                 = RestingEcg.GRI_UNDEFINED;
		this.TDuration              = RestingEcg.GRI_UNDEFINED;
		this.PPosDuration           = RestingEcg.GRI_UNDEFINED;
		this.TPosDuration           = RestingEcg.GRI_UNDEFINED;
		this.QrsIntrinsicoidDefl    = RestingEcg.GRI_UNDEFINED;
		this.PPosAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.PNegAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.PeakToPeakQrsAmplitude = RestingEcg.GRI_UNDEFINED;
		this.R1Amplitude            = RestingEcg.GRI_UNDEFINED;
		this.QAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.RAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.SAmplitude             = RestingEcg.GRI_UNDEFINED;
		this.RDashAmplitude         = RestingEcg.GRI_UNDEFINED;
		this.SDashAmplitude         = RestingEcg.GRI_UNDEFINED;
		this.RDashDashAmplitude     = RestingEcg.GRI_UNDEFINED;
		this.SDashDashAmplitude     = RestingEcg.GRI_UNDEFINED;
		this.STAmplitude            = RestingEcg.GRI_UNDEFINED;
		this.STT28Amplitude         = RestingEcg.GRI_UNDEFINED;
		this.STT38Amplitude         = RestingEcg.GRI_UNDEFINED;
		this.TposAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.TnegAmplitude          = RestingEcg.GRI_UNDEFINED;
		this.QrsArea                = RestingEcg.GRI_UNDEFINED;
		this.PArea                  = RestingEcg.GRI_UNDEFINED;
		this.TArea                  = RestingEcg.GRI_UNDEFINED;
		this.PMorphology            = RestingEcg.GRI_UNDEFINED;
		this.TMorphology            = RestingEcg.GRI_UNDEFINED;
		this.RNotches               = RestingEcg.GRI_UNDEFINED;
		this.DeltaWaveConfidence    = RestingEcg.GRI_UNDEFINED;
		this.STSlope                = RestingEcg.GRI_UNDEFINED;
		this.QTInterval             = RestingEcg.GRI_UNDEFINED;
		this.STMAmplitude           = RestingEcg.GRI_UNDEFINED;
		this.ST60Amplitude          = RestingEcg.GRI_UNDEFINED;
		this.STTMidAmplitude        = RestingEcg.GRI_UNDEFINED;
		
	}
	
	// ----------------------------------------------------------------------

	/**
	 * Prints the contents of the {@link LeadMeas} instance to the debug
	 * output log.
	 */
	public void printContent()
	{
		short	i;
		String DebugLine;


		Log.d( TAG, "Measurements for lead " + this.LeadId.getValue() + " (" + this.LeadId.getLabel() + ")" );
		Log.d( TAG, "  QrsOnset      : " + this.QrsOnset );
		Log.d( TAG, "  ST Amplitude  : " + this.STAmplitude );
//		Log.d( TAG, "Patient age (days)    : " + AgeDays );
		//		Log.d( TAG, "Recording date        : " + RecordingDate );
		//		Log.d( TAG, "Recording time        : " + RecordingTime );
		
		//		DebugLine = "Drugs                 : ";
		//		for ( i = 0; i < GRI_MAX_DRUGS; i++ )
			//		{
		//			DebugLine += Drugs[i] + " ";
		//		}
		//		Log.d( TAG, DebugLine );
		//		DebugLine = "Clinical class        : ";
		//		for ( i = 0; i < GRI_MAX_CLINCLASS; i++ )
		//		{
		//			DebugLine += ClinicalClassification[i] + " ";
		//		}
	//		Log.d( TAG, DebugLine );
		
		Log.d( TAG, " " );
		
	}
};


